package com.epsilon.training.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;
@Component //  will also work -> Repository("dao") dao from pakage
@Slf4j

public class JDBCproductDao implements ProductDao {

	private String url;
	private String username;
	private String password;
	private String driverClassName;
	
	@Autowired(required=false)
	private DataSource dataSource;
	
	public void setDataSource(DataSource dataSource) {
		log.debug("invoking setDatasource {}",dataSource.getClass());
		this.dataSource = dataSource;
	}


	public JDBCproductDao()
	{}
	public JDBCproductDao(DataSource dataSource)
	{
		this.dataSource=dataSource;																		
	}
	

	public JDBCproductDao(String url, String username, String password, String driverClassName) {
		super();
		log.debug("Invoking constructor");
		this.url = url;
		this.username = username;
		this.password = password;
		this.driverClassName = driverClassName;
	}
	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		log.debug("Invoking setUrl function with parameter {}",url);
		this.url = url;
	}

	public String getUsername() {
	
		return username;
	}

	

	public void setUsername(String username) {
		log.debug("Invoking setUsername function with parameter {}",username);
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		log.debug("Invoking setPassword function with parameter {}",password);
		this.password = password;
	}

	public String getDriverClassName() {
		
		
		return driverClassName;
	}

	public void setDriverClassName(String driverClassName) {
		log.debug("Invoking setdriverClassName function with parameter {}",driverClassName);
		this.driverClassName = driverClassName;
	}
	
	private Connection getConnection() throws ClassNotFoundException, SQLException
	{
		if(this.dataSource!=null)
		{
			return this.dataSource.getConnection();
		}
		Class.forName(this.driverClassName);
		return DriverManager.getConnection(url,username,password);
	}
	
	@Override
	public long count() {
		// TODO Auto-generated method stub
		log.debug("Trying to get count");
		String sql="select count(*) as cnt from products";
		try(Connection conn = this.getConnection();
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(sql);)
		{
			rs.next();
			return rs.getLong("cnt");
		}
		
		
	catch(Exception ex)
		{
		throw new RuntimeException(ex);
		}
	}
}

